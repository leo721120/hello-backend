version: '3'

networks:
  backend: {}
  dapr: {}

services:
  #---------------------------------------
  zipkin:
    # used as Dapr component
    image: openzipkin/zipkin-slim:2.23
    #
    networks:
      - dapr
    ports:
      - 59411:9411 # open for dashboard
    environment:
      # persist storage is not support Postgres, may cause too many container in production...
      STORAGE_TYPE: mem
  #---------------------------------------
  redis:
    # used as Dapr component, https://hub.docker.com/r/bitnami/redis
    image: bitnami/redis:6.2.8
    #
    networks:
      - dapr
    environment:
      #
      REDIS_PASSWORD: ${REDIS_PASSWORD}
  #---------------------------------------
  mongo:
    # database, https://hub.docker.com/r/bitnami/mongodb
    image: bitnami/mongodb:6.0.3
    #
    networks:
      - backend
    volumes:
      - ./cnf/mongo:/docker-entrypoint-initdb.d
    environment:
      # password for root
      MONGODB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
      # password for database
      MONGODB_PASSWORD: ${MONGODB_PASSWORD}
      # username for database
      MONGODB_USERNAME: ${MONGODB_USERNAME}
      # name of database
      MONGODB_DATABASE: ${MONGODB_DATABASE}
  #---------------------------------------
  postgres:
    # database, https://hub.docker.com/r/bitnami/postgresql
    image: bitnami/postgresql:15.1.0
    #
    networks:
      - backend
    volumes:
      - ./cnf/postgres:/docker-entrypoint-initdb.d
    environment:
      # password for database
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
      # username for database
      POSTGRESQL_USERNAME: ${POSTGRESQL_USERNAME}
      # name of database
      POSTGRESQL_DATABASE: ${POSTGRESQL_DATABASE}
  #---------------------------------------
  placement:
    # dapr
    image: daprio/dapr:1.9.5
    #
    networks:
      - dapr
    depends_on:
      # following is used as component
      - zipkin
      - redis
    command: [ "./placement", "-port", "50006" ]
  #---------------------------------------
  devapp-dapr:
    # sidecar
    image: daprio/daprd:1.9.5
    # this means that the app and the sidecars are able to communicate over their localhost interface.
    network_mode: service:devapp
    #
    volumes:
      # mount our components folder for the runtime to use.
      - "./cnf/dapr/:/dapr"
    depends_on:
      - devapp
    command:
      [
        "./daprd",
        "-app-id",
        "devapp", # the id for your application, used for service discovery
        "-app-port",
        "58088", # service listen port (not for outside)
        "-placement-host-address",
        "placement:50006",
        "-dapr-http-port",
        "3500", # open for outside, all traffics to service should through here
        "-config",
        "/dapr/config.yml",
        "-log-level",
        "info"
      ]
  #---------------------------------------
  devapp:
    # application service
    build: '.'
    #
    networks:
      - backend
    depends_on:
      # depend placement for sidecar
      - placement
      - postgres
      - mongo
    ports:
      # open for external access
      - 3500:3500
    environment:
      NODE_ENV: production
      # default to 'info'
      LOG_LEVEL: info
      # application needs to communicate externally through Dapr
      DAPR_HTTP_PORT: 3500
      # milliseconds before the request times out
      DAPR_TIMEOUT: 3000
      # port for listen HTTP request from Dapr sidecar
      APP_PORT: 58088
      # the id for your application, used for service discovery
      APP_ID: devapp
      # options for sequelize
      SEQUELIZE_HREF: postgres://${POSTGRESQL_USERNAME}:${POSTGRESQL_PASSWORD}@postgres:5432/${POSTGRESQL_DATABASE}
      SEQUELIZE_SCHEMA: ${POSTGRESQL_SCHEMA}
      SEQUELIZE_OPTIONS: |
        {
        }
      # options for mongodb
      MONGODB_HREF: mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongo:27017/${MONGODB_DATABASE}
      MONGODB_OPTIONS: |
        {
        }
      # communicate with each other applications
      EVENT_PUBSUB: pubsub
