openapi: 3.0.3

info:
  version: 1.0.0
  title: example backend
  description: |
    Welcome to the reference for the example backend API.

    # Authentication

    There is no authentication mechanism for this service.

    # HTTP method Verbs

    - The GET method requests a representation of the specified resource. Requests using GET should only retrieve data.
    - The PUT method replaces all current representations of the target resource with the request payload.
    - The POST method submits an entity to the specified resource, often causing a change in state or side effects on the server.
    - The PATCH method applies partial modifications to a resource.
    - The DELETE method deletes the specified resource.

tags:
  - name: User
    description: |
      about user
      <SchemaDefinition schemaRef="#/components/schemas/user"/>

servers:
  - url: http://{hostname}:{port}/v1.0/invoke/{appid}/method
    description: |
      only for develop
    variables:
      hostname:
        description: |
          hostname to server
        default: localhost
      port:
        description: |
          port to listen
        default: "8088"
      appid:
        description: |
          name of application
        default: devapp

security: []

paths:
  /version:
    get:
      summary: QueryVersion
      description: |
        query version for this service
      tags: []
      responses:
        default:
          description: |
            operation failed
        200:
          description: |
            operation success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/version"
  /config:
    get:
      summary: QueryConfig
      description: |
        query configuration from this service
      tags: []
      responses:
        default:
          description: |
            operation failed
        200:
          description: |
            operation success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/config"
  /events:
    post:
      summary: ReceiveEvent
      description: |
        receive event from other service
      tags: []
      requestBody:
        required: true
        content:
          application/cloudevents+json:
            example:
              {
                "id": "00-0af7651916cd43dd8448eb211c80319c-b7ad6b7169203331-01",
                "type": "Event.From.Other.Service",
                "time": "2022-11-25T14:06:53Z",
                "data": {},
              }
            schema:
              $ref: "#/components/schemas/event"
      responses:
        default:
          description: |
            operation failed
        200:
          description: |
            operation success
          content:
            application/json:
              example: { status: "SUCCESS" }
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCESS
  /users:
    get:
      description: |

      tags:
        - User
      responses:
        200:
          description: |
            operation success
          content:
            application/json:
              schema: {}

x-webhooks:
  UserAdded:
    post:
      summary: UserAdded
      description: |
        event notification about new user has be added
      tags: []
      requestBody:
        content:
          application/cloudevents+json:
            example:
              {
                "id": "00-0af7651916cd43dd8448eb211c80319c-b7ad6b7169203331-01",
                "type": "IAM.UserAdded",
                "time": "2022-11-25T14:06:53Z",
                "data": { "id": "USER-JmJEL9Y8PrbrvqCVEfg5SlUCxEVJfVU6" },
              }
            schema:
              allOf:
                - $ref: "#/components/schemas/event"
                - required:
                    - data
                  properties:
                    type:
                      enum:
                        - IAM.UserAdded
                    data:
                      allOf:
                        - $ref: "#/components/schemas/user"
                        - required:
                            - id

components:
  schemas:
    version:
      additionalProperties: false
      type: object
      example: { version: "1.0.0" }
      required:
        - version
      properties:
        version:
          description: |
            version of this service
          type: string
          minLength: 1
          maxLength: 99
    config:
      additionalProperties: false
      type: object
      example: {}
      properties: {}
    event:
      # https://raw.githubusercontent.com/cloudevents/spec/main/cloudevents/formats/cloudevents.json
      description: |
        CloudEvents Specification JSON Schema
      type: object
      required:
        - source
        - time
        - type
        - id
      properties:
        id:
          description: |
            Identifies the event.
          type: string
          minLength: 1
        type:
          description: |
            Describes the type of event related to the originating occurrence.
          type: string
          minLength: 1
        time:
          description: |
            Timestamp of when the occurrence happened. Must adhere to RFC 3339.
          type: string
          format: date-time
          minLength: 1
        source:
          description: |
            Identifies the context in which an event happened.
          type: string
          minLength: 1
        subject:
          description: |
            Describes the subject of the event in the context of the event producer (identified by source).
          type: string
          minLength: 1
        specversion:
          description: |
            The version of the CloudEvents specification which the event uses.
          type: string
          minLength: 1
          default: "1.0"
        datacontenttype:
          description: |
            Content type of the data value. Must adhere to RFC 2046 format.
          type: string
          minLength: 1
          default: application/json
        data:
          description: |
            The event payload.
    user:
      description: |
        
      type: object
      properties:
        id:
          type: string

  parameters:
    user-id:
      in: path
      name: id
      required: true
      schema:
        $ref: "#/components/schemas/user/properties/id"
