@startuml component
!include <C4/C4_Component>

Boundary(core, Core) {
Container_Boundary(license.service, LicenseService) {
  SetPropertyHeader(Type, Description)
  AddProperty(License.BillingStopped, )
  AddProperty(License.DevicesRegistered, )
  AddProperty(License.DevicesDisabled, )
  AddProperty(License.DevicesEnabled, )
  AddProperty(License.DevicesRemoved, )
  AddProperty(License.LicensesApplied, )
  AddProperty(License.BillingChanged, )
  AddProperty(License.BalanceIsLow, )
  AddProperty(License.OutOfBalance, )
  AddProperty(License.BalanceRestored, )
  AddProperty(License.BillingCreated, )
  System(events, Events)
  
  SetPropertyHeader(Code, Description)
  AddProperty(License.BrandNotFound, )
  AddProperty(License.ExternalServerNotAllowAccess, LicenseService的IP地址不在白名單上)
  System(errors, Errors)
  Lay_D(events, errors)

  Component(event.out, Event, , Used to send events to the outside)
  Component(model, Model, , )
  Component(lic, License, , Used to interact with the LicenseServer)
  
  Component(service.brand, BrandService, , Used to maintain the brand information about billing)
  Rel(service.brand, model, ' ')
  Rel(service.brand, event.out, ' ')
  Component(service.cost, CostService, , Used to calculate brand usage)
  Rel(service.cost, lic, ' ')
  Rel(service.cost, model, ' ')
  Rel(service.cost, event.out, ' ')
  Lay_D(event.out, events)

  Component(controller.brand, BrandController, , )
  Rel(controller.brand, service.brand, ' ')
  Component(controller.cost, CostController, , )
  Rel(controller.cost, service.cost, ' ')
  
  Component(config, Config, , Referenced by all components)
  System_Ext(config.fs, File, configures)
  Rel_U(config, config.fs, read)
  
  Component(billing, BillingMechanism, , Used to perform billing)
  Rel(billing, service.cost, ' ')
  System_Ext(os.timer, Timer, system timer)
  Rel(os.timer, billing, regular execution)
  Rel_U(billing, os.timer, active)
}

ContainerDb_Ext(db, Database, )
Rel(model, db, ' ', SQL)

SystemQueue_Ext(event.bus, EventBus, Used to exchange event messages)
Rel(event.out, event.bus, send, TCP)

System_Ext(notify, NotificationService, Used to send notifications to 3rd systems)
Rel(notify, event.bus, subscribe)

System_Ext(backend, Backend, Used to handle the domain logic)
Rel(backend, controller.brand, query cost by brand, HTTP)
Rel(backend, controller.brand, stop billing by brand, HTTP)
Rel(backend, controller.cost, apply licenses, HTTP)
Rel(backend, controller.cost, remove devices, HTTP)
Rel(backend, controller.cost, register devices, HTTP)
Rel(backend, controller.cost, get license info, HTTP)
}

System_Ext(license, LicenseServer, Used to enable or extract info from license)
Rel_R(lic, license, extract/enable license, HTTPS)

Person(role, Brand Owner, )
Rel(role, backend, show balance, HTTPS)
Rel(role, backend, remove brand, HTTPS)
Rel(role, backend, show license info, HTTPS)
Rel(role, backend, register devices, HTTPS)
Rel(role, backend, remove devices, HTTPS)
Rel(role, backend, apply license, HTTPS)

Person(role.op, 系統維運人員, )
Rel(role.op, config.fs, setup)
@enduml